@using System.Threading
@using System.Threading.Tasks
@using AutoMapper
@using Inventory.Domain.Entities
@using Inventory.Domain.Repository.Abstract
@using MudBlazor

@typeparam T

<div class="row">
    <div class="col-3">
        <MudIconButton Color="Color.Secondary" Variant="MudBlazor.Variant.Filled" OnClick="OpenProductDialogAsync"
                       Icon="@Icons.Material.Filled.AdsClick">
        </MudIconButton>
    </div>
    <div class="col-9">
        <AutoComplete @bind-Value="name"
                      TItem="ProductModel"
                      @ref="autoComplete"
                      DataProvider="CustomersDataProvider"
                      PropertyName="Name"
                      Placeholder="Search a product..."
                      StringComparison="StringComparison.Ordinal"
                      OnChanged="(ProductModel customer) => OnAutoCompleteChanged(customer)" />
    </div>
</div>
<div class="@(string.IsNullOrEmpty(productTitle) ? "d-none" : "d-block")">
    Product selected: @productTitle
</div>

@code {
    [Parameter] public EventCallback<ProductModel> SelectedProductChanged { get; set; }
    [Parameter] public ProductModel SelectedProduct { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private IProductRepository ProductRepository { get; set; }
    [Inject] private IMapper Mapper { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }

    private AutoComplete<ProductModel> autoComplete;
    private string productTitle = string.Empty;
    private string name;
    private ProductEntity product = new();
    private List<ProductModel> products = new();
    private List<ProductModel> productsAfterSearch = new();

    protected override async Task OnInitializedAsync()
    {
        await GetProductsAsync();
    }

    public async Task OpenProductDialogAsync()
    {
        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                CloseOnEscapeKey = true,
                CloseButton = true,
                Position = DialogPosition.Center
            };
        var dialog = await DialogService.ShowAsync<ProductsDialog>("Products List", options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            SelectedProduct = (ProductModel)result.Data;
            productTitle = SelectedProduct.Name;
            await SelectedProductChanged.InvokeAsync(SelectedProduct);
        }
    }

    private async Task<IEnumerable<ProductModel>> SearchProductEntities(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return productsAfterSearch.ToList();
        return products.Where(n => n.ProductId.ToLower().Contains(value) || n.Name.ToLower().Contains(value))
                      .ToList();
    }

    private async Task GetProductsAsync()
    {
        try
        {
            var productsDb = await ProductRepository.GetAll();
            if (productsDb.Count != 0)
            {
                products = productsDb.Select(p => Mapper.Map<ProductModel>(p)).ToList();
                productsAfterSearch = products;
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Something went wrong while getting products.", Severity.Error);
        }
    }

    private async Task<AutoCompleteDataProviderResult<ProductModel>> CustomersDataProvider(AutoCompleteDataProviderRequest<ProductModel> request)
    {
        var prods = await SearchProductEntities(request.Filter.Value, request.CancellationToken);

        return await Task.FromResult(new AutoCompleteDataProviderResult<ProductModel> { Data = prods });
    }

    private async Task OnAutoCompleteChanged(ProductModel product)
    {
        await SelectedProductChanged.InvokeAsync(product);
    }
}