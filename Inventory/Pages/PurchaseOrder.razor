@page "/purchaseorder"
@using Variant = MudBlazor.Variant

<EditForm Model="@purchaseOrderModel" class="card-header"
          OnValidSubmit="async ()=>
                {
                    if(purchaseOrderModel.Id == Guid.Empty){
                        await AddPurchaseOrder();
                }
                    else{
                        await EditPurchaseOrder();
                } }">
    <DataAnnotationsValidator />
       <div class="d-flex flex-row justify-content-between">
        <div class="d-flex justify-content-around align-items-center">
            <button type="submit" id="button-submit" class="btn btn-light btn-order-add">
                <img src="img/add.png" alt="add" class="variant-add-img" />
            </button>
            <button type="button" id="button-close" class="btn btn-light btn-cancel-add" @onclick="CancelOrder">
                <img src="img/cancel.png" alt="cancel" class="variant-cancel-img" />
            </button>
        </div>
        <div class="mb-2 col-1 text-center">
            <label for="date" class="form-label">Date</label>
            <DateInput TValue="DateOnly?" @bind-Value="purchaseOrderModel.Date" id="date" class="form-control text-center" />
        </div>
        <div class="mb-2 col-2 text-center">
            <label for="supplierid" class="form-label">Supplier ID</label>
            <div class="d-flex justify-content-between">

                <MudIconButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="OpenSupplierDialogAsync"
                               Icon="@Icons.Material.Filled.AdsClick">
                </MudIconButton>


                <MudAutocomplete T="SupplierModel" Label="Supplier ID"
                                 Value="selectedSupplier"
                                 ValueChanged="OnSupplierSelected"
                                 SearchFunc="SearchSupplierEntities"
                                 ToStringFunc="@(e => e == null ? null : $"{e.Name} ({e.SupplierId})")"
                                 Clearable="true"
                                 ClearIcon="@Icons.Material.Filled.Clear"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true" CoerceValue="true" />

                <InputText @bind-Value="purchaseOrderModel.SupplierId" class="form-control text-center" disabled hidden />
            </div>
        </div>
        <div class="mb-2 col-2 text-center">
            <label for="productid" class="form-label">Product ID</label>
            <div class="d-flex justify-content-between">
                <MudIconButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="OpenProductDialogAsync"
                               Icon="@Icons.Material.Filled.AdsClick">
                </MudIconButton>
                <MudAutocomplete T="ProductModel" Label="Product"
                                 Placeholder="Product"
                                 Value="selectedProduct"
                                 ValueChanged="OnProductSelected"
                                 Clearable="true"
                                 ClearIcon="@Icons.Material.Filled.Clear"
                                 SearchFunc="SearchProductEntities"
                                 ToStringFunc="@(e => e == null ? null : $"{e.Name} ({e.ProductId})")"
                                 ResetValueOnEmptyText="true"
                                 CoerceText="true" CoerceValue="true" />
                <InputText @bind-Value="purchaseOrderModel.ProductId" class="form-control text-center" disabled hidden />
                <InputText @bind-Value="purchaseOrderModel.ProductName" class="form-control text-center" disabled hidden />
            </div>
        </div>
        <div class="mb-2 col-1 text-center">
            <MudSelect @bind-Value="purchaseOrderModel.VariantId"
                       Variant="MudBlazor.Variant.Filled"
                       Label="Variant">
                @if (selectedProduct != null && selectedProduct.Variants.Count != 0)
                {
                    @foreach (var item in selectedProduct.Variants)
                    {
                        <MudSelectItem Value="@item.VariantId">@item.Name</MudSelectItem>
                    }
                }
            </MudSelect>
        </div>
        <div class="mb-2 col-1 text-center">
            <label for="quantity" class="form-label">Quantity</label>
            <InputNumber @bind-Value="purchaseOrderModel.Quantity" id="quantity" class="form-control text-center" />
        </div>
        <div class="mb-2 col-1 text-center">
            <label for="duedate" class="form-label">Due Date</label>
            <DateInput TValue="DateOnly?" @bind-Value="purchaseOrderModel.DueDate" id="variantid" class="form-control text-center" />
        </div>
        <div class="mb-2 col-1 text-center">
            <label for="productrate" class="form-label">Rate</label>
            <InputNumber @bind-Value="purchaseOrderModel.ProductRate" id="productrate" class="form-control text-center" />
        </div>
        <div class="mb-2 col-1 text-center">
            <MudSelect @bind-Value="purchaseOrderModel.OrderStatus"
                       Label="Order Status"
                       T="OrderStatus">
                @foreach (OrderStatus item in orderStatuses)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </div>
       
    </div>
    <div class="mb-2 col-12 text-center">
        <label for="remarks" class="form-label">Remarks</label>
        <InputText @bind-Value="purchaseOrderModel.Remarks" id="remarks" class="form-control" />
    </div>
    <ValidationSummary />
</EditForm>

        
<!-- Table Panel -->

<MudTable Items="ordersAfterSearch"
          Hover="true"
          Class="mt-2"
          Bordered="true"
          Striped="true"
          Dense="true"
          CanCancelEdit="true"
          MultiSelection="true"
          SelectionChangeable="true"
          @bind-SelectedItems="selectedOrders"
          SelectOnRowClick="true"
          EditTrigger="TableEditTrigger.RowClick"
          EditButtonPosition="TableEditButtonPosition.End"
          ApplyButtonPosition="TableApplyButtonPosition.End"
          IsEditRowSwitchingBlocked="true"
          RowEditPreview="BackupItem"
          RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="EditRowPurchaseOrder">
    <ToolBarContent>
        <MudButton Class="ms-1 me-1" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="DeleteSelectedOrders">Delete Selected Orders</MudButton>
        <MudButton Class="ms-1 me-1" Variant="Variant.Filled" Color="Color.Tertiary" OnClick="DeleteCompletedOrders">Delete Completed Orders</MudButton>


        <Search SearchItemCallBack="SearchItem" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.Date)">
                Date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.SupplierId)">
                Supplier ID
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.ProductId)">
                Product ID
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.ProductName)">
                Product Name
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.VariantId)">
                Variant ID
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.Quantity)">
                Quantity
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.DueDate)">
                Due Date
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.ProductRate)">
                Rate
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.OrderStatus)">
                Order Status
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<PurchaseOrderModel, object>(x => x.Remarks)">
                Remarks
            </MudTableSortLabel>
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Date</MudTd>
        <MudTd>@context.SupplierId</MudTd>
        <MudTd>@context.ProductId</MudTd>
        <MudTd>@context.ProductName</MudTd>
        <MudTd>@context.VariantId</MudTd>
        <MudTd>@context.Quantity</MudTd>
        <MudTd>@context.DueDate</MudTd>
        <MudTd>@context.ProductRate</MudTd>
        <MudTd>@context.OrderStatus</MudTd>
        <MudTd>@context.Remarks</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd>

            <DateInput TValue="DateOnly?" @bind-Value="context.Date" id="date" class="form-control text-center" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.SupplierId" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.ProductId" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.ProductName" />
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.VariantId" />
        </MudTd>
        <MudTd>
            <MudNumericField @bind-Value="context.Quantity" />
        </MudTd>
        <MudTd>

            <DateInput TValue="DateOnly?" @bind-Value="context.DueDate" id="date" class="form-control text-center" />
        </MudTd>
        <MudTd>
            <MudNumericField @bind-Value="context.ProductRate" />
        </MudTd>
        <MudTd>
            <MudSelect @bind-Value="context.OrderStatus"
                       Variant="MudBlazor.Variant.Filled"
                       Label="Order Status"
                       T="OrderStatus">
                @foreach (OrderStatus item in orderStatuses)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
        </MudTd>
        <MudTd>
            <MudTextField @bind-Value="context.Remarks" />
        </MudTd>
    </RowEditingTemplate>

    <NoRecordsContent>
        <MudText Align="Align.Center">Not Found!</MudText>
    </NoRecordsContent>
</MudTable>