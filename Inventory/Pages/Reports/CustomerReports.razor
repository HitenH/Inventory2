@using AutoMapper
@using Inventory.Domain.Repository.Abstract
@using Inventory.Service
<MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="By Area">
        <AreaSalesReport />
    </MudTabPanel>
    <MudTabPanel Text="Customers">

        <MudDataGrid T="CustomerModel" MultiSelection="true" Items="@customersAfterSearch" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
        Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
            <ToolBarContent>
                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <Columns>
                <SelectColumn T="CustomerModel" />
                <PropertyColumn Property="x => x.CustomerId" Title="Customer ID" Sortable="false" Filterable="false" />
                <PropertyColumn Property="x => x.Name" SortBy="@_sortBy" />
                <PropertyColumn Property="x => x.Mobiles.FirstOrDefault().Phone.ToString()" />
                <PropertyColumn Property="x => x.Area" Title="Area" />
                <PropertyColumn Property="x => totalAmount[x.Id]" Title="Amount" />
            </Columns>
            <PagerContent>
                <MudDataGridPager T="CustomerModel" />
            </PagerContent>
        </MudDataGrid>
    </MudTabPanel>
</MudTabs>


@code {

    [Inject] private ICustomerRepository CustomerRepository { get; set; }
    [Inject] private ISaleRepository SaleRepository { get; set; }
    [Inject] private ILogger<Customers> Logger { get; set; }
    [Inject] private IMapper Mapper { get; set; }
    [Inject] private ISnackbar Snackbar { get; set; }
    [Inject] private NavigationManager navManager { get; set; }
    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private IMobileService MobileService { get; set; }

    private List<CustomerModel> customers = new();
    private List<CustomerModel> customersAfterSearch = new();
    private IDialogReference dialogReference;
    private Dictionary<Guid, decimal> totalAmount = new();

    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var list = await CustomerRepository.GetAll();
            if (list.Count != 0)
            {
                customers = list.Select(c => Mapper.Map<CustomerModel>(c)).ToList();
                customersAfterSearch = [.. customers.OrderBy(o => o.Name)];
                GetTotalAmount();
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError("Customers page error" + ex.Message);
        }
    }

    public void SearchItem(ChangeEventArgs e)
    {
        var search = e.Value.ToString().ToLower();
        customersAfterSearch = customers.Where(n => n.CustomerId.ToLower().Contains(search)
                        || n.Name.ToLower().Contains(search)
                        || n.Mobiles.Any(x => x.Phone.ToLower().Contains(search))
                        || n.Area.ToLower().Contains(search)).ToList();
    }

    public void GetTotalAmount()
    {
        if (customersAfterSearch.Count != 0)
        {
            totalAmount = customersAfterSearch.Select(customer => new
            {
                CustomerId = customer.Id,
                TotalAmount = customer.Sales.Sum(sale => sale.TotalAmountProduct)
            }).ToDictionary(result => result.CustomerId, result => result.TotalAmount);
        }
    }

    private async Task ShowLoadingDialogAsync()
    {

        var options = new DialogOptions() { CloseButton = false, MaxWidth = MaxWidth.ExtraSmall };

        dialogReference = await DialogService.ShowAsync<LoadingDialog>("Adding customers...", options);
    }

    private void CloseDialog()
    {
        dialogReference.Close();
    }

    // DataGrid Events

    // custom sort by name length
    private Func<CustomerModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<CustomerModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.Mobiles.Any(x => x.Phone.ToLower().Contains(_searchString, StringComparison.OrdinalIgnoreCase)))
            return true;

        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Name} {x.Area} {x.Mobiles}".Contains(_searchString))
            return true;

        return false;
    };

    void RowClicked(DataGridRowClickEventArgs<CustomerModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<CustomerModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    void SelectedItemsChanged(HashSet<CustomerModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
