@page "/reports/salesorders"
@using Inventory.Domain.Entities
@using Inventory.Domain.Repository.Abstract
@using Inventory.Models

<MudDataGrid T="SalesOrderModel" MultiSelection="true" Items="@salesOrdersAfterSearch" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="SalesOrderModel" />
        <PropertyColumn Property="x => x.VoucherId" Title="Voucher ID" />
        <PropertyColumn Property="x => x.CustomerId" Title="Customer ID" />
        <PropertyColumn Property="x => x.CustomerName" Title="Customer Name" />
        <PropertyColumn Property="x => x.Date" Title="Date" />
        <PropertyColumn Property="x => x.DueDate" Title="Due Date" />
        <PropertyColumn Property="x => x.OrderStatus" Title="Status" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="SalesOrderModel" />
    </PagerContent>
</MudDataGrid>

@code {
    [Inject] public ISalesOrderRepository SalesOrderRepository { get; set; }
    [Inject] private ICustomerRepository CustomerRepository { get; set; }
    [Inject] public ILogger<SalesOrders> Logger { get; set; }
    [Inject] IDialogService DialogService { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    private List<SalesOrderModel> salesOrders = new();
    //Get enums list to populate order status
    private List<OrderStatus> orderStatuses = Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>().ToList();
    private List<SalesOrderModel> salesOrdersAfterSearch = new();
    private List<SalesOrderEntity> salesOrdersDb = new();
    private HashSet<SalesOrderModel> selectedSalesOrders = new();
    private SalesOrderModel salesOrderModelBackup = new();
    private Snackbar snackbar;
    private bool isSortAscending = false;
    private bool isSelected = false;
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetOrders();
        }
    }

    public async Task GetOrders()
    {
        try
        {
            salesOrdersDb = await SalesOrderRepository.GetAll();
            salesOrders = salesOrdersDb.Select(o => new SalesOrderModel()
                {
                    CustomerId = o.Customer.CustomerId,
                    CustomerName = o.Customer.Name,
                    Date = o.Date,
                    DueDate = o.DueDate,
                    Id = o.Id,
                    VoucherId = o.VoucherId,
                    OrderStatus = o.OrderStatus,
                    TotalAmountProduct = o.TotalAmountProduct
                }).ToList();
            salesOrdersAfterSearch = [.. salesOrders.OrderByDescending(o => o.Date)];
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError("SalesOrders error: " + ex.Message);
        }
    }

    public void SearchItem(ChangeEventArgs e)
    {
        var search = e.Value.ToString().ToLower();
        salesOrdersAfterSearch = salesOrders.Where(n => n.CustomerName.ToLower().Contains(search)
                                           || n.VoucherId.ToString().Contains(search)
                                           || n.Date.ToString().Contains(search)
                                           || n.DueDate.ToString().Contains(search)
                                           || n.OrderStatus.ToString().ToLower().Contains(search)).ToList();
    }



    // DataGrid Events
    // custom sort by name length
    private Func<SalesOrderModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.CustomerName.Length;
        else
            return x.CustomerName;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<SalesOrderModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.VoucherId.ToString().ToLower().Contains(_searchString)
                                      || x.CustomerName.ToString().ToLower().Contains(_searchString)
                                      || x.DueDate.ToString().Contains(_searchString)
                                      || x.OrderStatus.ToString().ToLower().Contains(_searchString))
        {
            return true;
        }

        return false;
    };

    void RowClicked(DataGridRowClickEventArgs<SalesOrderModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<SalesOrderModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    void SelectedItemsChanged(HashSet<SalesOrderModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
