@using AutoMapper
@using Inventory.Domain.Entities
@using Inventory.Domain.Repository.Abstract
@using Inventory.Models

<MudDataGrid T="PurchaseOrderModel" MultiSelection="true" Items="@ordersAfterSearch" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@_quickFilter"
             Hideable="true" RowClick="@RowClicked" RowContextMenuClick="RowRightClicked" SelectedItemsChanged="@SelectedItemsChanged">
    <ToolBarContent>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="PurchaseOrderModel" />
        <PropertyColumn Property="x => x.Date" Title="Date" Sortable="false" Filterable="false" />
        <PropertyColumn Property="x => x.SupplierId" Title="Supplier ID" SortBy="@_sortBy" />
        <PropertyColumn Property="x => x.ProductId" Title="Product ID" />
        <PropertyColumn Property="x => x.ProductName" Title="Product Name" />
        <PropertyColumn Property="x => x.VariantId" Title="Variant ID" />
        <PropertyColumn Property="x => x.Quantity" Title="Quantity" />
        <PropertyColumn Property="x => x.DueDate" Title="Due Date" />
        <PropertyColumn Property="x => x.ProductRate" Title="Rate" />
        <PropertyColumn Property="x => x.OrderStatus" Title="Order Status" />
        <PropertyColumn Property="x => x.Remarks" Title="Remarks" />
    </Columns>
    <PagerContent>
        <MudDataGridPager T="PurchaseOrderModel" />
    </PagerContent>
</MudDataGrid>

@code {

    [Inject] private IPurchaseOrderRepository PurchaseOrderRepository { get; set; }
    [Inject] private ILogger<PurchaseOrder> Logger { get; set; }
    [Inject] IDialogService DialogService { get; set; }
    [Inject] ISupplierRepository SupplierRepository { get; set; }
    [Inject] IProductRepository ProductRepository { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    [Inject] IMapper Mapper { get; set; }
    //Get enums list to populate order status
    private List<OrderStatus> orderStatuses = Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>().ToList();

    private PurchaseOrderEntity purchaseOrderEntity = new();
    private PurchaseOrderModel purchaseOrderModel = new();
    private PurchaseOrderModel purchaseOrderModelBackup = new();
    private List<PurchaseOrderModel> orders = new();
    private List<PurchaseOrderModel> ordersAfterSearch = new();
    private HashSet<PurchaseOrderModel> selectedOrders = new();
    private ProductModel selectedProduct;
    private SupplierModel selectedSupplier;
    private List<PurchaseOrderEntity> ordersDb = new();
    private Snackbar snackbar;
    private string _searchString;
    private bool _sortNameByLength;
    private List<string> _events = new();


    protected async override Task OnInitializedAsync()
    {
        await GetOrders();
    }

    public async Task GetOrders()
    {
        try
        {
            ordersDb = await PurchaseOrderRepository.GetAll();
            orders = ordersDb.Select(o => new PurchaseOrderModel()
                {
                    Date = o.Date,
                    DueDate = o.DueDate,
                    Id = o.Id,
                    OrderStatus = o.OrderStatus,
                    ProductId = o.ProductId,
                    ProductName = o.ProductName,
                    ProductRate = o.ProductRate,
                    Quantity = o.Quantity,
                    Remarks = o.Remarks,
                    SupplierId = o.SupplierId,
                    VariantId = o.VariantId
                }).ToList();
            //Order by Date latest
            ordersAfterSearch = [.. orders.OrderByDescending(o => o.Date)];
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError("Purchase order error: " + ex.Message);
        }
    }

    public void SearchItem(ChangeEventArgs e)
    {
        var search = e.Value.ToString().ToLower();
        ordersAfterSearch = orders.Where(n => n.SupplierId.ToString().ToLower().Contains(search)
                                           || n.ProductId.ToString().ToLower().Contains(search)
                                           || n.ProductName.ToLower().Contains(search)
                                           || n.Quantity.ToString().Contains(search)
                                           || n.OrderStatus.ToString().ToLower().Contains(search)
                                           || n.ProductRate.ToString().Contains(search)).ToList();
    }

    // DataGrid Events
    // custom sort by name length
    private Func<PurchaseOrderModel, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.ProductName.Length;
        else
            return x.ProductName;
    };
    // quick filter - filter globally across multiple columns with the same input
    private Func<PurchaseOrderModel, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.SupplierId.ToString().ToLower().Contains(_searchString)
                                      || x.ProductId.ToString().ToLower().Contains(_searchString)
                                      || x.ProductName.ToLower().Contains(_searchString)
                                      || x.Quantity.ToString().Contains(_searchString)
                                      || x.OrderStatus.ToString().ToLower().Contains(_searchString)
                                      || x.ProductRate.ToString().Contains(_searchString))
        {
            return true;
        }

        return false;
    };

    void RowClicked(DataGridRowClickEventArgs<PurchaseOrderModel> args)
    {
        _events.Insert(0, $"Event = RowClick, Index = {args.RowIndex}, Data = {System.Text.Json.JsonSerializer.Serialize(args.Item)}");
    }

    void RowRightClicked(DataGridRowClickEventArgs<PurchaseOrderModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }

    void SelectedItemsChanged(HashSet<PurchaseOrderModel> items)
    {
        _events.Insert(0, $"Event = SelectedItemsChanged, Data = {System.Text.Json.JsonSerializer.Serialize(items)}");
    }
}
